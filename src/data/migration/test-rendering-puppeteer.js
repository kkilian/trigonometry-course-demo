/**
 * Test renderowania matematyki w aplikacji u≈ºywajƒÖc Puppeteer
 * Sprawdza czy React-KaTeX poprawnie wy≈õwietla matematykƒô
 */

const puppeteer = require('puppeteer');
const path = require('path');
const fs = require('fs');

/**
 * Czeka na za≈Çadowanie elementu
 */
async function waitForElement(page, selector, timeout = 5000) {
    try {
        await page.waitForSelector(selector, { timeout });
        return true;
    } catch (error) {
        console.log(`‚ùå Element ${selector} nie znaleziony`);
        return false;
    }
}

/**
 * G≈Ç√≥wny test renderowania
 */
async function testMathRendering() {
    console.log('üß™ TEST RENDEROWANIA MATEMATYKI W APLIKACJI');
    console.log('='.repeat(80));
    
    let browser;
    
    try {
        // 1. Uruchom przeglƒÖdarkƒô
        console.log('üöÄ Uruchamianie przeglƒÖdarki...');
        browser = await puppeteer.launch({
            headless: 'new', // U≈ºyj nowego trybu headless
            defaultViewport: { width: 1280, height: 800 },
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const page = await browser.newPage();
        
        // 2. Przejd≈∫ do aplikacji
        console.log('üì± Otwieranie aplikacji...');
        await page.goto('http://localhost:3000', {
            waitUntil: 'networkidle2',
            timeout: 30000
        });
        
        // Czekaj na za≈Çadowanie
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 3. Sprawd≈∫ czy strona g≈Ç√≥wna siƒô za≈Çadowa≈Ça
        console.log('üîç Sprawdzanie strony g≈Ç√≥wnej...');
        
        // Sprawd≈∫ r√≥≈ºne mo≈ºliwe selektory
        let hasWelcomeScreen = await waitForElement(page, '.bg-gradient-to-br');
        if (!hasWelcomeScreen) {
            hasWelcomeScreen = await waitForElement(page, '.min-h-screen');
        }
        if (!hasWelcomeScreen) {
            hasWelcomeScreen = await waitForElement(page, 'button');
        }
        
        if (!hasWelcomeScreen) {
            // Sprawd≈∫ co jest na stronie
            const pageContent = await page.evaluate(() => {
                return {
                    title: document.title,
                    hasButtons: document.querySelectorAll('button').length,
                    bodyText: document.body.innerText.substring(0, 200)
                };
            });
            console.log('üìÑ Zawarto≈õƒá strony:', pageContent);
            throw new Error('Strona g≈Ç√≥wna nie za≈Çadowa≈Ça siƒô poprawnie');
        }
        
        // Screenshot strony g≈Ç√≥wnej
        await page.screenshot({ 
            path: path.join(__dirname, 'screenshot-welcome.png'),
            fullPage: true 
        });
        console.log('üì∏ Screenshot strony g≈Ç√≥wnej zapisany');
        
        // 4. Kliknij w kurs trygonometrii
        console.log('üéØ Wybieranie kursu trygonometrii...');
        
        // Szukaj przycisku "Trygonometria"
        const trigButton = await page.evaluate(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            const trigBtn = buttons.find(btn => btn.textContent.includes('Trygonometria'));
            if (trigBtn) {
                trigBtn.click();
                return true;
            }
            return false;
        });
        
        if (!trigButton) {
            console.log('‚ö†Ô∏è  Nie znaleziono przycisku Trygonometria, pr√≥bujƒô alternatywnƒÖ metodƒô...');
            // Alternatywna metoda - klikniƒôcie pierwszego przycisku kursu
            await page.click('button.bg-gradient-to-r');
        }
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 5. Sprawd≈∫ czy lista problem√≥w siƒô za≈Çadowa≈Ça
        console.log('üìã Sprawdzanie listy problem√≥w...');
        const hasProblemList = await waitForElement(page, '.max-w-7xl');
        
        if (hasProblemList) {
            // Screenshot listy problem√≥w
            await page.screenshot({ 
                path: path.join(__dirname, 'screenshot-problem-list.png'),
                fullPage: false // Tylko widoczna czƒô≈õƒá
            });
            console.log('üì∏ Screenshot listy problem√≥w zapisany');
        }
        
        // 6. Sprawd≈∫ renderowanie matematyki - szukaj element√≥w KaTeX
        console.log('üî¨ Sprawdzanie renderowania KaTeX...');
        
        const katexElements = await page.evaluate(() => {
            // Szukaj element√≥w KaTeX
            const katexSpans = document.querySelectorAll('.katex');
            const katexHTML = document.querySelectorAll('.katex-html');
            const mathML = document.querySelectorAll('.katex-mathml');
            
            return {
                katexCount: katexSpans.length,
                katexHTMLCount: katexHTML.length,
                mathMLCount: mathML.length,
                hasKatex: katexSpans.length > 0,
                samples: Array.from(katexSpans).slice(0, 5).map(el => ({
                    text: el.textContent,
                    html: el.innerHTML.substring(0, 100) + '...'
                }))
            };
        });
        
        console.log('\nüìä ANALIZA RENDEROWANIA KATEX:');
        console.log(`‚úÖ Elementy .katex znalezione: ${katexElements.katexCount}`);
        console.log(`‚úÖ Elementy .katex-html: ${katexElements.katexHTMLCount}`);
        console.log(`‚úÖ Elementy .katex-mathml: ${katexElements.mathMLCount}`);
        
        if (katexElements.hasKatex) {
            console.log('\nüéØ PRZYK≈ÅADY WYRENDEROWANEJ MATEMATYKI:');
            katexElements.samples.forEach((sample, i) => {
                console.log(`  ${i + 1}. "${sample.text}"`);
            });
        } else {
            console.log('‚ö†Ô∏è  BRAK element√≥w KaTeX na stronie!');
        }
        
        // 7. Kliknij w pierwszy problem ≈ºeby zobaczyƒá szczeg√≥≈Çy
        console.log('\nüñ±Ô∏è  Otwieranie pierwszego problemu...');
        
        try {
            // Znajd≈∫ i kliknij pierwszy problem
            const firstProblemClicked = await page.evaluate(() => {
                const firstButton = document.querySelector('button.text-left');
                if (firstButton) {
                    firstButton.click();
                    return true;
                }
                return false;
            });
            
            if (firstProblemClicked) {
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                // Screenshot problemu
                await page.screenshot({ 
                    path: path.join(__dirname, 'screenshot-problem-detail.png'),
                    fullPage: true 
                });
                console.log('üì∏ Screenshot szczeg√≥≈Ç√≥w problemu zapisany');
                
                // Sprawd≈∫ matematykƒô w szczeg√≥≈Çach problemu
                const detailKatex = await page.evaluate(() => {
                    const katexInDetail = document.querySelectorAll('.katex');
                    return {
                        count: katexInDetail.length,
                        hasSteps: document.querySelector('.space-y-4') !== null,
                        samples: Array.from(katexInDetail).slice(0, 3).map(el => el.textContent)
                    };
                });
                
                console.log('\nüìä MATEMATYKA W SZCZEG√ì≈ÅACH PROBLEMU:');
                console.log(`‚úÖ Elementy KaTeX: ${detailKatex.count}`);
                console.log(`‚úÖ Ma kroki rozwiƒÖzania: ${detailKatex.hasSteps ? 'TAK' : 'NIE'}`);
                if (detailKatex.samples.length > 0) {
                    console.log('üî¢ Przyk≈Çady:');
                    detailKatex.samples.forEach((sample, i) => {
                        console.log(`   ${i + 1}. "${sample}"`);
                    });
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è  Nie uda≈Ço siƒô otworzyƒá szczeg√≥≈Ç√≥w problemu:', error.message);
        }
        
        // 8. Sprawd≈∫ b≈Çƒôdy w konsoli
        console.log('\nüêõ Sprawdzanie b≈Çƒôd√≥w konsoli...');
        
        const consoleErrors = [];
        page.on('console', msg => {
            if (msg.type() === 'error') {
                consoleErrors.push(msg.text());
            }
        });
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        if (consoleErrors.length > 0) {
            console.log('‚ùå Znalezione b≈Çƒôdy konsoli:');
            consoleErrors.forEach(err => console.log(`   - ${err}`));
        } else {
            console.log('‚úÖ Brak b≈Çƒôd√≥w w konsoli');
        }
        
        // 9. Test wydajno≈õci renderowania
        console.log('\n‚ö° Test wydajno≈õci renderowania...');
        
        const performanceMetrics = await page.evaluate(() => {
            const timing = window.performance.timing;
            return {
                domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,
                fullLoad: timing.loadEventEnd - timing.navigationStart,
                domReady: timing.domComplete - timing.domLoading
            };
        });
        
        console.log(`‚è±Ô∏è  DOM Content Loaded: ${performanceMetrics.domContentLoaded}ms`);
        console.log(`‚è±Ô∏è  Full Page Load: ${performanceMetrics.fullLoad}ms`);
        console.log(`‚è±Ô∏è  DOM Ready: ${performanceMetrics.domReady}ms`);
        
        // 10. Podsumowanie
        console.log('\n' + '='.repeat(80));
        console.log('üìä PODSUMOWANIE TESTU RENDEROWANIA');
        console.log('='.repeat(80));
        
        const testResults = {
            pageLoaded: hasWelcomeScreen,
            katexFound: katexElements.hasKatex,
            katexCount: katexElements.katexCount,
            consoleErrors: consoleErrors.length,
            performance: performanceMetrics.fullLoad < 3000 ? 'DOBRA' : 'WOLNA',
            overallStatus: katexElements.hasKatex && consoleErrors.length === 0 ? 'SUKCES' : 'PROBLEMY'
        };
        
        console.log(`üéØ Status og√≥lny: ${testResults.overallStatus === 'SUKCES' ? '‚úÖ' : '‚ùå'} ${testResults.overallStatus}`);
        console.log(`üì± Strona za≈Çadowana: ${testResults.pageLoaded ? '‚úÖ' : '‚ùå'}`);
        console.log(`üî¢ KaTeX znaleziony: ${testResults.katexFound ? '‚úÖ' : '‚ùå'} (${testResults.katexCount} element√≥w)`);
        console.log(`üêõ B≈Çƒôdy konsoli: ${testResults.consoleErrors === 0 ? '‚úÖ Brak' : `‚ùå ${testResults.consoleErrors}`}`);
        console.log(`‚ö° Wydajno≈õƒá: ${testResults.performance}`);
        
        if (testResults.overallStatus === 'SUKCES') {
            console.log('\nüéâ MATEMATYKA RENDERUJE SIƒò POPRAWNIE!');
            console.log('‚úÖ React-KaTeX dzia≈Ça prawid≈Çowo');
            console.log('‚úÖ Konwersja danych zako≈Ñczona sukcesem');
        } else {
            console.log('\n‚ö†Ô∏è  WYKRYTO PROBLEMY Z RENDEROWANIEM');
            console.log('üîß Sprawd≈∫ screenshoty i logi powy≈ºej');
        }
        
        console.log('\nüì∏ Screenshoty zapisane w:');
        console.log('   - screenshot-welcome.png');
        console.log('   - screenshot-problem-list.png');
        console.log('   - screenshot-problem-detail.png');
        
    } catch (error) {
        console.error('\n‚ùå B≈ÅƒÑD TESTU:', error.message);
        console.error('Sprawd≈∫ czy aplikacja dzia≈Ça na http://localhost:3000');
    } finally {
        if (browser) {
            console.log('\nüîö Zamykanie przeglƒÖdarki...');
            await browser.close();
        }
    }
}

// Uruchom test
if (require.main === module) {
    testMathRendering()
        .then(() => {
            console.log('\n‚úÖ Test zako≈Ñczony');
            process.exit(0);
        })
        .catch(error => {
            console.error('\n‚ùå Test nieudany:', error);
            process.exit(1);
        });
}